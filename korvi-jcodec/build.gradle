apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "maven-publish"

// https://github.com/square/okio/issues/647
// https://docs.gradle.org/current/userguide/component_metadata_rules.html
//configurations {
//    compileClasspath {
//        attributes.attribute(org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType.attribute, org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType.jvm)
//    }
//}

repositories {
    mavenLocal()
    mavenCentral()
}

def publishUser = (rootProject.findProperty("BINTRAY_USER") ?: project.findProperty("bintrayUser") ?: System.getenv("BINTRAY_USER"))?.toString()
def publishPassword = (rootProject.findProperty("BINTRAY_KEY") ?: project.findProperty("bintrayApiKey") ?: System.getenv("BINTRAY_API_KEY") ?: System.getenv("BINTRAY_KEY"))?.toString()

if (publishUser == null || publishPassword == null) {
    println("Required BINTRAY_USER and BINTRAY_KEY in ~/.gradle/gradle.properties")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
}

publishing {
    repositories {
        def GITHUB_REPOSITORY = System.getenv("GITHUB_REPOSITORY")
        def GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")
        //def GITHUB_REPOSITORY = "korlibs/easy-kotlin-mpp-gradle-plugin"
        //def GITHUB_TOKEN = "test"
        if (GITHUB_REPOSITORY != null && GITHUB_TOKEN != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${GITHUB_REPOSITORY}")
                credentials(HttpHeaderCredentials) {
                    name = "authorization"
                    value = "Bearer ${GITHUB_TOKEN}"
                }
            }
        }

        if (publishUser && publishPassword) {
            maven {
                credentials {
                    username = publishUser
                    password = publishPassword
                }
                url = uri("https://api.bintray.com/maven/${project.property("project.bintray.org")}/${project.property("project.bintray.repository")}/${project.property("project.bintray.package")}/")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
            artifact(sourcesJar)
            artifact(javadocJar)

            pom {
                name = project.name
                description = project.property("project.description")
                url = project.property("project.scm.url")
                licenses {
                    license {
                        name = project.property("project.license.name")
                        url = project.property("project.license.url")
                    }
                }
                scm {
                    url = project.property("project.scm.url")
                }
            }
        }
    }
}

// @TODO: Migrate this or expose a separate plugin just for this

publish.doLast {
    def subject = project.property("project.bintray.org")
    def repo = project.property("project.bintray.repository")
    def _package = project.property("project.bintray.package")
    def version = project.version

    ((HttpURLConnection)new URL("https://bintray.com/api/v1/content/$subject/$repo/$_package/$version/publish").openConnection()).with({
        requestMethod = 'POST'
        doOutput = true

        setRequestProperty("Authorization", "Basic " + "$publishUser:$publishPassword".bytes.encodeBase64().toString())
        outputStream.withPrintWriter({printWriter ->
            printWriter.write('{"discard": false, "publish_wait_for_secs": -1}')
        })
        System.out.println(inputStream.text)
    })
}
